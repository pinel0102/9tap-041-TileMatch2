<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebAssembly.Bindings</name>
    </assembly>
    <members>
        <member name="M:WebAssembly.Core.Array.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:WebAssembly.Core.Array"/> class.
            </summary>
            <param name="_params">Parameters.</param>
        </member>
        <member name="M:WebAssembly.Core.Array.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:WebAssembly.Core.Array"/> class.
            </summary>
            <param name="js_handle">Js handle.</param>
        </member>
        <member name="M:WebAssembly.Core.Array.Push(System.Object[])">
            <summary>
            Push the specified elements.
            </summary>
            <returns>The new length of the Array push was called on</returns>
            <param name="elements">Elements.</param>
        </member>
        <member name="M:WebAssembly.Core.Array.Pop">
            <summary>
            Pop this instance.
            </summary>
            <returns>The element removed from the array or null if the array was empty</returns>
        </member>
        <member name="M:WebAssembly.Core.Array.Shift">
            <summary>
            Remove the first element of the Array and return that element
            </summary>
            <returns>The removed element</returns>
        </member>
        <member name="M:WebAssembly.Core.Array.UnShift(System.Object[])">
            <summary>
            Add <paramref name="elements"/> to the array starting at index <c>0</c>
            </summary>
            <returns>The length after shift.</returns>
            <param name="elements">Elements.</param>
        </member>
        <member name="M:WebAssembly.Core.Array.IndexOf(System.Object,System.Int32)">
            <summary>
            Index of the search element.
            </summary>
            <returns>The index of first occurrence of searchElement in the Array or -1 if not Found</returns>
            <param name="searchElement">Search element.</param>
            <param name="fromIndex">The index to start the search from</param>
        </member>
        <member name="M:WebAssembly.Core.Array.LastIndexOf(System.Object)">
            <summary>
            Finds the index of the last occurrence of<paramref name="searchElement" />
            </summary>
            <returns>The index of the last occurrence</returns>
            <param name="searchElement">Search element.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WebAssembly.Core.Array.LastIndexOf(System.Object,System.Int32)" -->
        <member name="P:WebAssembly.Core.Array.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:WebAssembly.Core.Array"/> with the index specified by <paramref name="i" />.
            </summary>
            <param name="i">The index.</param>
        </member>
        <member name="M:WebAssembly.Core.ArrayBuffer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebAssembly.Core.ArrayBuffer"/> class.
            </summary>
        </member>
        <member name="M:WebAssembly.Core.ArrayBuffer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WebAssembly.Core.ArrayBuffer"/> class.
            </summary>
            <param name="length">Length.</param>
        </member>
        <member name="M:WebAssembly.Core.ArrayBuffer.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:WebAssembly.Core.ArrayBuffer"/> class.
            </summary>
            <param name="js_handle">Js handle.</param>
        </member>
        <member name="P:WebAssembly.Core.ArrayBuffer.ByteLength">
            <summary>
            The length of an ArrayBuffer in bytes. 
            </summary>
            <value>The length of the underlying ArrayBuffer in bytes.</value>
        </member>
        <member name="P:WebAssembly.Core.ArrayBuffer.IsView">
            <summary>
            Gets a value indicating whether this <see cref="T:WebAssembly.Core.ArrayBuffer"/> is view.
            </summary>
            <value><c>true</c> if is view; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:WebAssembly.Core.ArrayBuffer.Slice(System.Int32)">
            <summary>
            Slice the specified begin.
            </summary>
            <returns>The slice.</returns>
            <param name="begin">Begin.</param>
        </member>
        <member name="M:WebAssembly.Core.ArrayBuffer.Slice(System.Int32,System.Int32)">
            <summary>
            Slice the specified begin and end.
            </summary>
            <returns>The slice.</returns>
            <param name="begin">Begin.</param>
            <param name="end">End.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WebAssembly.Core.Float32Array.op_Implicit(WebAssembly.Core.Float32Array)~System.Span{System.Single}" -->
        <!-- Badly formed XML comment ignored for member "M:WebAssembly.Core.Float32Array.op_Implicit(System.Span{System.Single})~WebAssembly.Core.Float32Array" -->
        <!-- Badly formed XML comment ignored for member "M:WebAssembly.Core.Float64Array.op_Implicit(WebAssembly.Core.Float64Array)~System.Span{System.Double}" -->
        <!-- Badly formed XML comment ignored for member "M:WebAssembly.Core.Float64Array.op_Implicit(System.Span{System.Double})~WebAssembly.Core.Float64Array" -->
        <member name="T:WebAssembly.Core.Function">
            <summary>
            The Function constructor creates a new Function object. Calling the constructor directly can create functions dynamically, but suffers from security and similar (but far less significant) performance issues similar to eval. However, unlike eval, the Function constructor allows executing code in the global scope, prompting better programming habits and allowing for more efficient code minification.
            </summary>
        </member>
        <member name="M:WebAssembly.Core.Function.Apply(System.Object,System.Object[])">
            <summary>
            The Apply() method calls a function with a given this value, and arguments provided as an array (or an array-like object).
            </summary>
            <returns>The apply.</returns>
            <param name="thisArg">This argument.</param>
            <param name="argsArray">Arguments.</param>
        </member>
        <member name="M:WebAssembly.Core.Function.Bind(System.Object,System.Object[])">
            <summary>
            Creates a new Function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.
            </summary>
            <returns>The bind.</returns>
            <param name="thisArg">This argument.</param>
            <param name="argsArray">Arguments.</param>
        </member>
        <member name="M:WebAssembly.Core.Function.Call(System.Object,System.Object[])">
            <summary>
            Calls a function with a given `this` value and arguments provided individually.
            </summary>
            <returns>The result of calling the function with the specified `this` value and arguments.</returns>
            <param name="thisArg">Optional (null value). The value of this provided for the call to a function. Note that this may not be the actual value seen by the method: if the method is a function in non-strict mode, null and undefined will be replaced with the global object and primitive values will be converted to objects.</param>
            <param name="argsArray">Optional. Arguments for the function.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WebAssembly.Core.Int16Array.op_Implicit(WebAssembly.Core.Int16Array)~System.Span{System.Int16}" -->
        <!-- Badly formed XML comment ignored for member "M:WebAssembly.Core.Int16Array.op_Implicit(System.Span{System.Int16})~WebAssembly.Core.Int16Array" -->
        <!-- Badly formed XML comment ignored for member "M:WebAssembly.Core.Int32Array.op_Implicit(WebAssembly.Core.Int32Array)~System.Span{System.Int32}" -->
        <!-- Badly formed XML comment ignored for member "M:WebAssembly.Core.Int32Array.op_Implicit(System.Span{System.Int32})~WebAssembly.Core.Int32Array" -->
        <!-- Badly formed XML comment ignored for member "M:WebAssembly.Core.Int8Array.op_Implicit(WebAssembly.Core.Int8Array)~System.Span{System.SByte}" -->
        <!-- Badly formed XML comment ignored for member "M:WebAssembly.Core.Int8Array.op_Implicit(System.Span{System.SByte})~WebAssembly.Core.Int8Array" -->
        <member name="M:WebAssembly.Core.SharedArrayBuffer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WebAssembly.Core.SharedArrayBuffer"/> class.
            </summary>
            <param name="length">The size, in bytes, of the array buffer to create.</param>
        </member>
        <member name="P:WebAssembly.Core.SharedArrayBuffer.ByteLength">
            <summary>
            The size, in bytes, of the array. This is established when the array is constructed and cannot be changed.
            </summary>
            <value>The size, in bytes, of the array.</value>
        </member>
        <member name="M:WebAssembly.Core.SharedArrayBuffer.Slice(System.Int32,System.Int32)">
            <summary>
            Returns a new <see cref="T:WebAssembly.Core.SharedArrayBuffer"/> whose contents are a copy of this SharedArrayBuffer's bytes from begin, 
            inclusive, up to end, exclusive. If either begin or end is negative, it refers to an index from the end 
            of the array, as opposed to from the beginning.
            </summary>
            <returns>a new <see cref="T:WebAssembly.Core.SharedArrayBuffer"/></returns>
            <param name="begin">Beginning index of copy.</param>
            <param name="end">Ending index, exclusive.</param>
        </member>
        <member name="T:WebAssembly.Core.TypedArray`2">
            <summary>
            Represents a JavaScript TypedArray.
            </summary>
        </member>
        <member name="P:WebAssembly.Core.TypedArray`2.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:WebAssembly.Core.TypedArray`2"/> with the specified i.
            </summary>
            <param name="i">The index.</param>
        </member>
        <member name="M:WebAssembly.Core.TypedArray`2.ToArray">
            <summary>
            Copies the contents from the <see cref="T:WebAssembly.Core.TypedArray`2"/> memory into a new array.
            </summary>
        </member>
        <member name="M:WebAssembly.Core.TypedArray`2.From(System.ReadOnlySpan{`1})">
            <summary>
            Creates a new <see cref="T:WebAssembly.Core.TypedArray`2"/> from the ReadOnlySpan.
            </summary>
            <returns>The new TypedArray/</returns>
            <param name="span">ReadOnlySpan.</param>
        </member>
        <member name="M:WebAssembly.Core.TypedArray`2.CopyTo(System.Span{`1})">
            <summary>
            Copies the underlying <see cref="T:WebAssembly.Core.TypedArray`2"/> data to a Span.
            </summary>
            <returns>Total copied.</returns>
            <param name="span">Span.</param>
        </member>
        <member name="M:WebAssembly.Core.TypedArray`2.CopyFrom(System.ReadOnlySpan{`1})">
            <summary>
            Copies from a <see cref="T:Span{T}"/> to the <see cref="T:WebAssembly.Core.TypedArray`2"/> memory.
            </summary>
            <returns>Total copied</returns>
            <param name="span">ReadOnlySpan.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WebAssembly.Core.Uint16Array.op_Implicit(WebAssembly.Core.Uint16Array)~System.Span{System.UInt16}" -->
        <!-- Badly formed XML comment ignored for member "M:WebAssembly.Core.Uint16Array.op_Implicit(System.Span{System.UInt16})~WebAssembly.Core.Uint16Array" -->
        <!-- Badly formed XML comment ignored for member "M:WebAssembly.Core.Uint32Array.op_Implicit(WebAssembly.Core.Uint32Array)~System.Span{System.UInt32}" -->
        <!-- Badly formed XML comment ignored for member "M:WebAssembly.Core.Uint32Array.op_Implicit(System.Span{System.UInt32})~WebAssembly.Core.Uint32Array" -->
        <member name="M:WebAssembly.Core.Uint8Array.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebAssembly.Core.Uint8Array"/> class.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WebAssembly.Core.Uint8Array.op_Implicit(WebAssembly.Core.Uint8Array)~System.Span{System.Byte}" -->
        <!-- Badly formed XML comment ignored for member "M:WebAssembly.Core.Uint8Array.op_Implicit(System.Span{System.Byte})~WebAssembly.Core.Uint8Array" -->
        <!-- Badly formed XML comment ignored for member "M:WebAssembly.Core.Uint8ClampedArray.op_Implicit(WebAssembly.Core.Uint8ClampedArray)~System.Span{System.Byte}" -->
        <!-- Badly formed XML comment ignored for member "M:WebAssembly.Core.Uint8ClampedArray.op_Implicit(System.Span{System.Byte})~WebAssembly.Core.Uint8ClampedArray" -->
        <member name="T:WebAssembly.JSObject">
            <summary>
              JSObjects are wrappers for a native JavaScript object, and
              they retain a reference to the JavaScript object for the lifetime of this C# object.
            </summary>
        </member>
        <member name="M:WebAssembly.JSObject.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:WebAssembly.JSObject"/> class.
            </summary>
            <param name="js_handle">Js handle.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WebAssembly.JSObject.Invoke(System.String,System.Object[])" -->
        <member name="M:WebAssembly.JSObject.GetObjectProperty(System.String)">
            <summary>
              Returns the named property from the object, or throws a JSException on error.
            </summary>
            <param name="name">The name of the property to lookup</param>
            <remarks>
              This method can raise a <see cref="T:WebAssembly.JSException"/> if fetching the property in Javascript raises an exception.
            </remarks>
            <returns>
              <para>
                The return value can either be a primitive (string, int, double), a 
                <see cref="T:WebAssembly.JSObject"/> for JavaScript objects, a 
                <see cref="T:System.Threading.Tasks.Task"/>(object) for JavaScript promises, an array of
                a byte, int or double (for Javascript objects typed as ArrayBuffer) or a 
                <see cref="T:System.Func"/> to represent JavaScript functions.  The specific version of
                the Func that will be returned depends on the parameters of the Javascript function
                and return value.
              </para>
              <para>
                The value of a returned promise (The Task(object) return) can in turn be any of the above
                valuews.
              </para>
            </returns>
        </member>
        <member name="M:WebAssembly.JSObject.SetObjectProperty(System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
              Sets the named property to the provided value.
            </summary>
            <remarks>
            </remarks>
            <param name="name">The name of the property to lookup</param>
            <param name="value">The value can be a primitive type (int, double, string, bool), an
            array that will be surfaced as a typed ArrayBuffer (byte[], sbyte[], short[], ushort[],
            float[], double[]) </param>
            <param name="createIfNotExists">Defaults to <see langword="true"/> and creates the property on the javascript object if not found, if set to <see langword="false"/> it will not create the property if it does not exist.  If the property exists, the value is updated with the provided value.</param>
            <param name="hasOwnProperty"></param>
        </member>
        <member name="P:WebAssembly.JSObject.Length">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="M:WebAssembly.JSObject.HasOwnProperty(System.String)">
            <summary>
            Returns a boolean indicating whether the object has the specified property as its own property (as opposed to inheriting it).
            </summary>
            <returns><c>true</c>, if the object has the specified property as own property, <c>false</c> otherwise.</returns>
            <param name="prop">The String name or Symbol of the property to test.</param>
        </member>
        <member name="M:WebAssembly.JSObject.PropertyIsEnumerable(System.String)">
            <summary>
            Returns a boolean indicating whether the specified property is enumerable.
            </summary>
            <returns><c>true</c>, if the specified property is enumerable, <c>false</c> otherwise.</returns>
            <param name="prop">The String name or Symbol of the property to test.</param>
        </member>
        <member name="T:WebAssembly.Runtime">
            <summary>
              Provides access to the Mono/WebAssembly runtime to perform tasks like invoking JavaScript functions and retrieving global variables.
            </summary>
        </member>
        <member name="M:WebAssembly.Runtime.InvokeJS(System.String)">
            <summary>
            Execute the provided string in the JavaScript context
            </summary>
            <returns>The js.</returns>
            <param name="str">String.</param>
        </member>
        <member name="M:WebAssembly.Runtime.New``1(System.Object[])">
            <summary>
            Creates a new JavaScript object of the specified type
            </summary>
            <returns>The new.</returns>
            <param name="_params">Parameters.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:WebAssembly.Runtime.NewJSObject(WebAssembly.JSObject,System.Object[])">
            <summary>
            Creates a new JavaScript object 
            </summary>
            <returns>The JSO bject.</returns>
            <param name="js_func_ptr">Js func ptr.</param>
            <param name="_params">Parameters.</param>
        </member>
        <member name="M:WebAssembly.Runtime.GetGlobalObject(System.String)">
            <summary>
              Fetches a global object from the Javascript world, either from the current brower window or from the node.js global context.
            </summary>
            <remarks>
              This method returns the value of a global object marshalled for consumption in C#.
            </remarks>
            <returns>
              <para>
                The return value can either be a primitive (string, int, double), a 
                <see cref="T:WebAssembly.JSObject"/> for JavaScript objects, a 
                <see cref="T:System.Threading.Tasks.Task"/>(object) for JavaScript promises, an array of
                a byte, int or double (for Javascript objects typed as ArrayBuffer) or a 
                <see cref="T:System.Func"/> to represent JavaScript functions.  The specific version of
                the Func that will be returned depends on the parameters of the Javascript function
                and return value.
              </para>
              <para>
                The value of a returned promise (The Task(object) return) can in turn be any of the above
                valuews.
              </para>
            </returns>
            <param name="str">The name of the global object, or null if you want to retrieve the 'global' object itself.
            On a browser, this is the 'window' object, on node.js it is the 'global' object.
            </param>
        </member>
    </members>
</doc>
