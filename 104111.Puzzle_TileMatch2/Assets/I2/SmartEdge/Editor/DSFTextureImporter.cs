//using UnityEngine;//using UnityEditor;//using System.Collections;//namespace I2.SmartEdge//{//	public class DSFTextureImporter : AssetPostprocessor//	{//		bool UseSDF = false;//		//string TextureLabel = string.Empty;//		DistanceFieldGenerator.ChannelValue SourceChannel = DistanceFieldGenerator.ChannelValue.A;		//		int _SpreadSize = 9;//		int _Downscale = 1;		//		bool _ExpandBorders = false;//		bool _CropEmptySpace = true;		//		DistanceFieldGenerator.ChannelOutput 	OutputR = DistanceFieldGenerator.ChannelOutput.One,//												OutputG = DistanceFieldGenerator.ChannelOutput.One,//												OutputB = DistanceFieldGenerator.ChannelOutput.One,//												OutputA = DistanceFieldGenerator.ChannelOutput.DistanceField;//		public void OnPreprocessTexture ()//		{//			UseSDF = false;//			Object asset = AssetDatabase.LoadAssetAtPath(assetImporter.assetPath, typeof(Texture));//			string [] labels = AssetDatabase.GetLabels(asset);//			foreach (string label in labels)//				if (label.StartsWith("SDF"))//				{//					//TextureLabel = label;//					TextureImporter importer = (assetImporter as TextureImporter);//					importer.isReadable = true;//#if UNITY_5_5_OR_NEWER//					importer.textureCompression = TextureImporterCompression.Uncompressed;//#else//					importer.textureFormat = TextureImporterFormat.ARGB32;//#endif//					importer.alphaIsTransparency = false;//					ParseLabel(label);//					UseSDF = true;//					return;//				}//		}//		public void OnPostprocessTexture( Texture2D texture )//		{//			if (!UseSDF)//				return;//			//--[ Properties ]------------//			//if (_ExpandBorders)//			//	TextureTools.AddTextureBorders (texture, _SpreadSize, _SpreadSize, _SpreadSize, _SpreadSize, new Color(0,0,0,0));//			byte[] SDF;//			Color32[] Colors = texture.GetPixels32 ();//			DistanceFieldGenerator.GenerateDistanceField (Colors, SourceChannel, texture.width, texture.height, _SpreadSize, 1, out SDF, FreeTypeI2.eDownscaleType.Center);//			DistanceFieldGenerator.CreateOutput(SDF, Colors, Colors, OutputR, OutputG, OutputB, OutputA);//			texture.SetPixels32 (Colors);//			if (_ExpandBorders)//				TextureTools.AddTextureBorders (texture,_SpreadSize, _SpreadSize, _SpreadSize, _SpreadSize);//			if (_Downscale>1)//				TextureTools.Bilinear (texture, texture.width / _Downscale, texture.height / _Downscale);			//			if (_CropEmptySpace)//				TextureTools.CropEmptySpace (texture, new Color32(0,0,0,0), false, false, false, true);//		}//		void ParseLabel( string Label )//		{//			//Label = "SDF_R_DDDD_5_1_expand_crop";//			string[] texts = Label.Split ('_');//			//"SDF_R_RGBD_5_1_expand_crop"//			//  0  1  2   3 4 //			_ExpandBorders  = (Label.IndexOf("expand")>0);//			_CropEmptySpace = (Label.IndexOf("crop")>0);//			if (texts.Length < 4 || !int.TryParse (texts [3], out _SpreadSize))//				_SpreadSize = 15;//			if (texts.Length < 5 || !int.TryParse (texts [4], out _Downscale))//				_Downscale = 1;//			SourceChannel = DistanceFieldGenerator.ChannelValue.A;//			if (texts.Length >= 2)//			{//				for (DistanceFieldGenerator.ChannelValue i = (DistanceFieldGenerator.ChannelValue)0; i<DistanceFieldGenerator.ChannelValue.AvgRGBA; ++i)//					if (texts[1]==i.ToString())//					{//						SourceChannel = i;//						break;//					}//			}//			if (texts.Length >= 3 && texts[2].Length==4)//			{//				OutputR = GetOutputFromChar(texts[2][0]);//				OutputG = GetOutputFromChar(texts[2][1]);//				OutputB = GetOutputFromChar(texts[2][2]);//				OutputA = GetOutputFromChar(texts[2][3]);//			}//			else//			{//				OutputR = DistanceFieldGenerator.ChannelOutput.SourceR;//				OutputG = DistanceFieldGenerator.ChannelOutput.SourceG;//				OutputB = DistanceFieldGenerator.ChannelOutput.SourceB;//				OutputA = DistanceFieldGenerator.ChannelOutput.DistanceField;//			}//		}//		DistanceFieldGenerator.ChannelOutput GetOutputFromChar( char c )//		{//			switch (c)//			{//				case 'D' : return DistanceFieldGenerator.ChannelOutput.DistanceField;//				case '0' : return DistanceFieldGenerator.ChannelOutput.Zero;//				case '1' : return DistanceFieldGenerator.ChannelOutput.One;//				case 'R' : return DistanceFieldGenerator.ChannelOutput.SourceR;//				case 'G' : return DistanceFieldGenerator.ChannelOutput.SourceG;//				case 'B' : return DistanceFieldGenerator.ChannelOutput.SourceB;//				default  :  return DistanceFieldGenerator.ChannelOutput.SourceA;//			}//		}//	}//}