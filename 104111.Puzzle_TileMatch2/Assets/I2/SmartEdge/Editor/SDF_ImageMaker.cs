using UnityEditor;
using UnityEngine;
using System;
using System.Collections.Generic;
using System.IO;

//TODO: Removing 1 pixel lines
//TODO: Antialising borders

namespace I2.SmartEdge
{
	public class SDF_ImageMaker : EditorWindow
	{
		#region Variables
		
		Texture2D InputTexture=null, OutputTexture, LayeredTexture;
		bool HasLayerData = false;

		[System.Serializable]
		class ColorLayer
		{
			public Texture2D texture = new Texture2D(4,4,TextureFormat.ARGB32, false, true);
			public Color32[] pixels;	// texture's pixels
			public bool textureIsAutoGenerated = true;

			public Texture2D textureSDF = new Texture2D(4,4,TextureFormat.ARGB32, false, true);
			public List<Color32> colors = new List<Color32>() {Color.black};
		}
		List<ColorLayer> ColorLayers = new List<ColorLayer>();

		DistanceFieldGenerator.ChannelValue SourceChannel = DistanceFieldGenerator.ChannelValue.A;

		float _SpreadFactor = 0.2f;
		int _Downscale = 1;
        FreeTypeI2.eDownscaleType _DownscaleType = FreeTypeI2.eDownscaleType.Center;


        bool _ExpandBorders = false;
		bool _CropEmptySpace = false;
		bool _CropKeepAspectRatio = false;

		enum eGenerationType { SingleLayer, MultiLayer }
		eGenerationType _GenerationType = eGenerationType.SingleLayer;

		Vector2 ScrollPos = Vector3.zero;

		DistanceFieldGenerator.ChannelOutput 	OutputR = DistanceFieldGenerator.ChannelOutput.SourceR,
												OutputG = DistanceFieldGenerator.ChannelOutput.SourceG,
												OutputB = DistanceFieldGenerator.ChannelOutput.SourceB,
												OutputA = DistanceFieldGenerator.ChannelOutput.DistanceField;
		TextureFormat OutputFormat = TextureFormat.ARGB32;
		#endregion
		
		#region Editor
		[MenuItem("Tools/I2 SmartEdge/SDF Image Maker", false, 1)]
		[MenuItem("Assets/I2 SmartEdge/Open Image Maker", false, 1)]
		static void ShowWindow()
		{
			EditorWindow.GetWindow<SDF_ImageMaker>(false, "Image Maker", true);
		}
		
		public void OnEnable()
		{
		}

		void SetupMultiLayer()
		{
			//-- Color Layers -----------------

			while (ColorLayers.Count<4)
				ColorLayers.Add(new ColorLayer());

			foreach (ColorLayer layer in ColorLayers)
				if (layer.texture==null)
				 	layer.texture = new Texture2D(4,4,TextureFormat.ARGB32, false, true);

			//-- Layered Texture -----------------

			if (LayeredTexture==null) 
				LayeredTexture=new Texture2D(4,4,TextureFormat.ARGB32, false, true);

			if (InputTexture!=null && (LayeredTexture.width!=InputTexture.width || LayeredTexture.height!=InputTexture.height))
				LayeredTexture.Resize(InputTexture.width, InputTexture.height);

		}
		
		#endregion
		
		#region Main Window
		
		void OnGUI()
		{
			ScrollPos = GUILayout.BeginScrollView(ScrollPos);

			OnGUI_InputData();

			GUILayout.Space(20);

			_GenerationType = (eGenerationType)GUITools.DrawTabs( (int)_GenerationType, new string[]{"Single Layer", "Multi Layer"}, null, 25);
			GUITools.BeginContents();
			switch (_GenerationType)
			{
				case eGenerationType.SingleLayer : OnGUI_SingleLayer(); break;
				case eGenerationType.MultiLayer : OnGUI_MultiLayer(); break;
			}
			GUITools.EndContents(false);

			GUILayout.Space(5);

			if (OutputTexture!=null)
				OnGUI_OutputTexture();

			EditorGUIUtility.labelWidth = 0;	
			GUILayout.EndScrollView();
		}

		void OnGUI_InputData()
		{
			GUILayout.BeginHorizontal("LargeButtonMid", GUILayout.Height(20));
				GUILayout.Label("Input Texture", EditorStyles.largeLabel);
			GUILayout.EndHorizontal();

			GUILayout.BeginHorizontal();
				InputTexture = (Texture2D)EditorGUILayout.ObjectField(InputTexture, typeof(Texture2D), false, GUILayout.Width(160), GUILayout.Height(160));

				GUILayout.BeginVertical();
					EditorGUIUtility.labelWidth = 110;
					SourceChannel = (DistanceFieldGenerator.ChannelValue)EditorGUILayout.EnumPopup ("Source Channel:", SourceChannel, GUILayout.Width(200));
					if (InputTexture!=null)
					{
						GUILayout.Space(10);
						GUILayout.Label(InputTexture.width + " x " + InputTexture.height + " @ " + InputTexture.format);
					}
					GUILayout.Space(10);

					OnGUI_SDF_Params();
			
				GUILayout.EndVertical();
			GUILayout.EndHorizontal();
		}

		void OnGUI_SDF_Params ()
		{
			EditorGUIUtility.labelWidth = 80;

			/*GUILayout.BeginHorizontal("LargeButtonMid", GUILayout.Height(20));
				GUILayout.Label("Signed Distance Field", EditorStyles.largeLabel);
			GUILayout.EndHorizontal();*/

			_SpreadFactor = EditorGUILayout.Slider ("Spread:", _SpreadFactor, 0, 1);
			if (InputTexture!=null)
			{
				GUILayout.Space(-5);
				GUILayout.BeginHorizontal();
					GUILayout.Space(EditorGUIUtility.labelWidth);
					GUILayout.FlexibleSpace();
					int Spread = Mathf.FloorToInt(Mathf.Max (InputTexture.width, InputTexture.height)*_SpreadFactor*0.5f/_Downscale);
					GUILayout.Label(Spread + " px", EditorStyles.miniLabel);
					GUILayout.FlexibleSpace();
					GUILayout.Space(20);
				GUILayout.EndHorizontal();
				GUILayout.Space(5);
			}


			_Downscale = Mathf.NextPowerOfTwo(EditorGUILayout.IntSlider( "Downscale", _Downscale, 1, 32));

			if (InputTexture!=null)
			{
				GUILayout.Space(-5);
				GUILayout.BeginHorizontal();
					GUILayout.Space(EditorGUIUtility.labelWidth);
					GUILayout.FlexibleSpace();
					string scaledSize = (InputTexture.width/_Downscale)+"x"+(InputTexture.height/_Downscale);
					GUILayout.Label(scaledSize, EditorStyles.miniLabel);
					GUILayout.FlexibleSpace();
					GUILayout.Space(20);
				GUILayout.EndHorizontal();
				GUILayout.Space(5);
			}

			GUILayout.BeginHorizontal();
				GUILayout.FlexibleSpace();
				GUILayout.BeginHorizontal("Box");
				
					GUILayout.BeginVertical ();
					GUILayout.Space(10);
					_ExpandBorders = GUILayout.Toggle (_ExpandBorders, "Expand Borders", GUILayout.Width(140));
					GUILayout.EndVertical();

					GUILayout.BeginVertical ();
						_CropEmptySpace = GUILayout.Toggle (_CropEmptySpace, "Crop Empty Space", GUILayout.Width(140));
						_CropKeepAspectRatio = GUILayout.Toggle (_CropKeepAspectRatio, "Keep Aspect Ratio", GUILayout.Width(140));
					GUILayout.EndVertical();
				GUILayout.EndHorizontal();
				GUILayout.FlexibleSpace();
			GUILayout.EndHorizontal();
		}

		void OnGUI_SingleLayer()
		{
			GUILayout.Space(5);
			EditorGUIUtility.labelWidth = 100;

			OutputR = (DistanceFieldGenerator.ChannelOutput)EditorGUILayout.EnumPopup ("Output R:", OutputR);//, GUILayout.Width (100+120));
			OutputG = (DistanceFieldGenerator.ChannelOutput)EditorGUILayout.EnumPopup ("Output G:", OutputG);//, GUILayout.Width (100+120));
			OutputB = (DistanceFieldGenerator.ChannelOutput)EditorGUILayout.EnumPopup ("Output B:", OutputB);//, GUILayout.Width (100+120));
			OutputA = (DistanceFieldGenerator.ChannelOutput)EditorGUILayout.EnumPopup ("Output A:", OutputA);//, GUILayout.Width (100+120));

			GUILayout.Space(10);
			OutputFormat = (TextureFormat)EditorGUILayout.EnumPopup ("Output Format:", OutputFormat);//, GUILayout.Width (100+120));
			
			GUILayout.Space(10);

			GUI.enabled = InputTexture!=null;
			GUILayout.BeginHorizontal();
				GUILayout.FlexibleSpace();
				if (GUILayout.Button ("Generate"))
					EditorApplication.update += GenerateDistanceField_SingleLayer;
				GUILayout.FlexibleSpace();
			GUILayout.EndHorizontal();
			GUI.enabled = true;

			GUILayout.Space(5);
            if (GUILayout.Button(
                "To create high-quality SDF assets from an image it needs to follow this guidelines:\n\n"+
                "\t-The Image should have exactly 1 pixel of anti-aliasing.\n\t More than one pixel or jagged image will generate staircase artifacts\n\n"+
                "\t-Make the source image be at least 4 times bigger and then\n\t downsample to allow for better precision\n\n"+
                "Click HERE For more details and tips", EditorStyles.helpBox))
                Application.OpenURL(SE_InspectorTools.HelpURL_CreateSDFImage);            
        }

        void OnGUI_MultiLayer()
		{
            EditorGUILayout.HelpBox("SDF Layered Assets are not fully functional and only enabled as a PREVIEW\nFeel free to test it and leave any suggestion/bug report in the inter-illusion forum to help me develop this feature!", MessageType.Warning);
			SetupMultiLayer();

			int SectionWidth = (Screen.width/4) - 20;
			GUILayout.Space(10);

			OnGUI_MutiLayer_Layers(SectionWidth);

			GUILayout.Space(10);

			GUILayout.BeginVertical();
				GUI.enabled = InputTexture!=null;

				GUILayout.BeginHorizontal();
				GUILayout.FlexibleSpace();
					GUILayout.BeginVertical("Box");
						GUILayout.BeginHorizontal();
						GUILayout.FlexibleSpace();
							GUILayout.Label("Generate Layers From:", EditorStyles.largeLabel);
						GUILayout.FlexibleSpace();
						GUILayout.EndHorizontal();

						GUILayout.BeginHorizontal();
							if (GUILayout.Button ("Layer Colors")) ComputeLayers(true, false);
							if (GUILayout.Button ("Input RGB")) ComputeLayers(false, true);
							if (GUILayout.Button ("Input RGBA")) ComputeLayers(false, false);
						GUILayout.EndHorizontal();
					GUILayout.EndVertical();
				GUILayout.FlexibleSpace();
				GUILayout.EndHorizontal();

				GUILayout.Space(10);
			GUI.enabled = (InputTexture!=null && HasLayerData);
				if (GUILayout.Button ("Generate Output")) {EditorApplication.update += GenerateDistanceField_MultiLayer;}
			GUILayout.EndVertical();
			GUI.enabled = true;


			GUILayout.Space(10);
		}

		void OnGUI_MutiLayer_Layers ( int SectionWidth )
		{
			GUILayout.BeginHorizontal();
			for (int i=0; i<4; ++i)
			{
				if (i>0) GUILayout.Space(5);
				GUILayout.BeginVertical();
				GUI.changed = false;

				Texture2D texture = (OutputTexture!=null ? ColorLayers[i].textureSDF : ColorLayers[i].texture);
				texture = (Texture2D)EditorGUILayout.ObjectField(texture, typeof(Texture2D), true, GUILayout.Width(SectionWidth), GUILayout.Height(SectionWidth));
				if (GUI.changed)
				{
					if (texture==null)
					{
						ColorLayers[i].texture = new Texture2D(InputTexture.width, InputTexture.height);
						ColorLayers[i].textureIsAutoGenerated = true;
					}
					else
					{
						ColorLayers[i].texture = texture;
						ColorLayers[i].textureIsAutoGenerated = false;
						if (InputTexture==null)
							InputTexture = texture;
					}
					OutputTexture = null;
					GUI.changed = false;
				}
				
				int ColorToDelete = -1;
				for (int j=0; j<ColorLayers[i].colors.Count; ++j)
				{
					GUILayout.BeginHorizontal();
						GUI.enabled = ColorLayers[i].colors.Count>1;
						if (GUILayout.Button("X", EditorStyles.toolbarButton))
							ColorToDelete = j;
						GUI.enabled = true;
						ColorLayers[i].colors[j] = EditorGUILayout.ColorField(ColorLayers[i].colors[j]);
					GUILayout.EndHorizontal();
				}
				if (GUILayout.Button("Add"))
					ColorLayers[i].colors.Add(Color.black);

				if (ColorToDelete>=0)
					ColorLayers[i].colors.RemoveAt(ColorToDelete);

				GUILayout.EndVertical();
			}
			GUILayout.EndHorizontal();

		}

		void OnGUI_OutputTexture()
		{
			GUILayout.Label(OutputTexture.width + " x " + OutputTexture.height + " @ " + OutputTexture.format + " = " + TextureTools.GetTextureMemory(OutputTexture));

			float ScrWidth = Screen.width;
			Rect rect = GUILayoutUtility.GetRect (ScrWidth, ScrWidth / 2);
			EditorGUI.DrawPreviewTexture (new Rect(rect.x, rect.y, rect.width/2-5, rect.height-5), OutputTexture);
			//EditorGUI.DrawTextureTransparent (new Rect(rect.x+rect.width/2, rect.y, rect.width/2-5, rect.height-5), OutputTexture);
			EditorGUI.DrawTextureAlpha (new Rect(rect.x+rect.width/2, rect.y, rect.width/2-5, rect.height-5), OutputTexture);

			GUILayout.BeginHorizontal ();
				GUILayout.FlexibleSpace ();
				GUILayout.Label ("RGB");
				GUILayout.FlexibleSpace ();
				GUILayout.Label ("Alpha");
				GUILayout.FlexibleSpace ();
			GUILayout.EndHorizontal ();

			//OutputTexture = (Texture2D)EditorGUILayout.ObjectField("Output", OutputTexture, typeof(Texture2D), false);
			GUILayout.Space(5);

			if (GUILayout.Button ("Save"))
				EditorApplication.update += SaveOutput;
		}
		#endregion

		#region Layers

		void ComputeLayers( bool UseLayerColors, bool IgnoreInputAlpha )
		{
			// Get Source Texture Pixels ----------------------------

			Color32[] sourceColors = TextureTools.GetPixels32(InputTexture);
			int sourceWidth  = InputTexture.width;
			int sourceHeight = InputTexture.height;

			// Get Layers Texture Pixels ----------------------------

			foreach (ColorLayer layer in ColorLayers)
			{
				Texture2D layerTexture = layer.texture;
				if (layerTexture==null) 
					layerTexture = TextureTools.Clone(Texture2D.blackTexture);

				if (layerTexture.width != sourceWidth || layerTexture.height != sourceHeight)
				{
					if (!layer.textureIsAutoGenerated)
					{
						TextureTools.MakeTextureReadable(layer.texture);
						layerTexture = TextureTools.Clone(layer.texture);
					}
					TextureTools.Bilinear(layerTexture, sourceWidth, sourceHeight);
				}

				layer.pixels = TextureTools.GetPixels32(layerTexture);
			}

			LayeredTexture = new Texture2D(sourceWidth, sourceHeight, TextureFormat.ARGB32, false, true);
			Color32[] LayeredColors = LayeredTexture.GetPixels32();


			// Assign Colors to the corresponding layer -------------------

			for (int pos=0; pos<sourceColors.Length; ++pos)
			{
				Color32 color = sourceColors[ pos ];

				int LayerIdx = -1;
				// If the layer is an external texture, Use LayerIdx=-1 and skip the copying for that layer
				if (GetLayerIndexFromNonAutogenerated(pos)<0)
					LayerIdx = (UseLayerColors ? GetLayerIndex( color, pos ) : GetLayerIndexFromChannel(color, IgnoreInputAlpha));

				for (int i=0; i<ColorLayers.Count; ++i)
					if (ColorLayers[i].textureIsAutoGenerated)
					{
						ColorLayers[i].pixels[pos] = (i==LayerIdx ? Color.white : Color.black);
					}

				// Merge layers into a Single Texture
				LayeredColors[pos] = new Color32((byte)(ColorLayers[0].pixels[pos].r),
				                                 (byte)(ColorLayers[1].pixels[pos].r),
				                                 (byte)(ColorLayers[2].pixels[pos].r),
				                                 (byte)(ColorLayers[3].pixels[pos].r));
			}

			// Apply the layer colors
			foreach( ColorLayer layer in ColorLayers)
				if (layer.textureIsAutoGenerated)
				{
					layer.texture.SetPixels32( layer.pixels );
					layer.texture.Apply();
				}
			LayeredTexture.SetPixels32( LayeredColors );
			LayeredTexture.Apply ();
			OutputTexture = null;
			HasLayerData = true;
		}

		int GetLayerIndex( Color32 c, int PixelPos )
		{
			int Index = 0;
			int ClosestDist = int.MaxValue;

			for (int i=0; i<ColorLayers.Count; ++i)
				if (ColorLayers[i].textureIsAutoGenerated)
				{
					ColorLayer layer = ColorLayers[i];

					for (int j=0; j<layer.colors.Count; ++j)
					{
						Color32 LayerColor = layer.colors[j];
						
						int LayerDist = Mathf.Abs((int)LayerColor.r-(int)c.r) + Mathf.Abs((int)LayerColor.g-(int)c.g) + Mathf.Abs((int)LayerColor.b-(int)c.b) + Mathf.Abs((int)LayerColor.a-(int)c.a);
						if (LayerDist<ClosestDist)
						{
							ClosestDist = LayerDist;
							Index = i;
						}
					}
				}
			return Index;			
		}

		int GetLayerIndexFromChannel( Color32 c, bool IgnoreAlpha )
		{
			// Ignore unsupplied layers
			if (!ColorLayers[0].textureIsAutoGenerated) c.r = 0;
			if (!ColorLayers[1].textureIsAutoGenerated) c.g = 0;
			if (!ColorLayers[2].textureIsAutoGenerated) c.b = 0;
			if (!ColorLayers[3].textureIsAutoGenerated || IgnoreAlpha) c.a = 0;

			int MaxChannel = Mathf.Max (c.r, Mathf.Max (c.g, Mathf.Max (c.b, c.a)));
			if (c.r >= MaxChannel) return 0;
			if (c.g >= MaxChannel) return 1;
			if (c.b >= MaxChannel) return 2;
			return 3;
		}

		int GetLayerIndexFromNonAutogenerated( int pos )
		{
			foreach (ColorLayer layer in ColorLayers)
				if (!layer.textureIsAutoGenerated && layer.pixels[pos].r>128)
					return 1;
			return -1;
		}


		#endregion

		#region Generation
		
		void GenerateDistanceField_SingleLayer()
		{
			EditorApplication.update -= GenerateDistanceField_SingleLayer;

			Color32[] colors = TextureTools.GetPixels32(InputTexture);
            if (colors==null)
            {
                string path = AssetDatabase.GetAssetPath(InputTexture);
                if (!path.StartsWith("Assets/", StringComparison.OrdinalIgnoreCase))
                    Debug.LogError("Unable to read texture '" + path + "/" + InputTexture.name + "'. Can't read Unity Built-in textures, please select one that is inside your project folder");
                else
                    Debug.LogError("Unable to read texture '" + path + "'. It needs to have Readable enabled or be inside the Assets folder.");
                return;
            }
			int Width = InputTexture.width;
			int Height = InputTexture.height;

			int SpreadSize = Mathf.FloorToInt(Mathf.Max (Width, Height)*_SpreadFactor*0.5f);
			if (_ExpandBorders)
			{
				TextureTools.AddTextureBorders (colors, out colors, ref Width, ref Height, SpreadSize, SpreadSize, SpreadSize, SpreadSize);
			}

			byte[] Values;
			DistanceFieldGenerator.GenerateDistanceField (colors, SourceChannel, Width, Height, SpreadSize, 1, out Values, _DownscaleType);
			DistanceFieldGenerator.CreateOutput (Values, colors, null, OutputR, OutputG, OutputB, OutputA);

			OutputTexture = new Texture2D (Width, Height, OutputFormat, false);
			OutputTexture.SetPixels32 (colors);

			if (_CropEmptySpace)
				TextureTools.CropEmptySpace (OutputTexture, new Color32(0,0,0,0), false, false, false, true, _CropKeepAspectRatio);

			if (_Downscale>1)
                TextureTools.Bilinear(OutputTexture, Width/ _Downscale, Height/_Downscale );
                //TextureTools.BilinearCenter(OutputTexture, Width, Height, _Downscale);

            OutputTexture.Apply ();
			Repaint ();
		}

		void GenerateDistanceField_MultiLayer()
		{
			EditorApplication.update -= GenerateDistanceField_MultiLayer;
			
			Color32[] colors = TextureTools.GetPixels32(LayeredTexture);
			int Width = LayeredTexture.width;
			int Height = LayeredTexture.height;
			
			int SpreadSize = Mathf.FloorToInt(Mathf.Max (Width, Height)*_SpreadFactor*0.5f);
			if (_ExpandBorders)
			{
				TextureTools.AddTextureBorders (colors, out colors, ref Width, ref Height, SpreadSize, SpreadSize, SpreadSize, SpreadSize);
			}
			
			byte[] Values;

			// Red Channel
			Values = DistanceFieldGenerator.GetValuesFromColors(colors, DistanceFieldGenerator.ChannelValue.R);
			DistanceFieldGenerator.GenerateDistanceField (ref Values, Width, Height, SpreadSize, 1, _DownscaleType);
			DistanceFieldGenerator.CreateOutput (Values, colors, null, DistanceFieldGenerator.ChannelOutput.DistanceField, DistanceFieldGenerator.ChannelOutput.SourceG, DistanceFieldGenerator.ChannelOutput.SourceB, DistanceFieldGenerator.ChannelOutput.SourceA );

			// Green Channel
			Values = DistanceFieldGenerator.GetValuesFromColors(colors, DistanceFieldGenerator.ChannelValue.G);
			DistanceFieldGenerator.GenerateDistanceField (ref Values, Width, Height, SpreadSize, 1, _DownscaleType);
			DistanceFieldGenerator.CreateOutput (Values, colors, null, DistanceFieldGenerator.ChannelOutput.SourceR, DistanceFieldGenerator.ChannelOutput.DistanceField, DistanceFieldGenerator.ChannelOutput.SourceB, DistanceFieldGenerator.ChannelOutput.SourceA );

			// Blue Channel
			Values = DistanceFieldGenerator.GetValuesFromColors(colors, DistanceFieldGenerator.ChannelValue.B);
			DistanceFieldGenerator.GenerateDistanceField (ref Values, Width, Height, SpreadSize, 1, _DownscaleType);
			DistanceFieldGenerator.CreateOutput (Values, colors, null, DistanceFieldGenerator.ChannelOutput.SourceR, DistanceFieldGenerator.ChannelOutput.SourceG, DistanceFieldGenerator.ChannelOutput.DistanceField, DistanceFieldGenerator.ChannelOutput.SourceA );

			// Alpha Channel
			Values = DistanceFieldGenerator.GetValuesFromColors(colors, DistanceFieldGenerator.ChannelValue.A);
			DistanceFieldGenerator.GenerateDistanceField (ref Values, Width, Height, SpreadSize, 1, _DownscaleType);
			DistanceFieldGenerator.CreateOutput (Values, colors, null, DistanceFieldGenerator.ChannelOutput.SourceR, DistanceFieldGenerator.ChannelOutput.SourceG, DistanceFieldGenerator.ChannelOutput.SourceB, DistanceFieldGenerator.ChannelOutput.DistanceField );

			if (_Downscale>1)
			{
				TextureTools.BilinearCenter (ref colors, Width, Height, _Downscale);
				Width /= _Downscale;
				Height/= _Downscale;
			}
			
			if (_CropEmptySpace)
			{
				TextureTools.CropEmptySpace (colors, Width, Height, out colors, out Width, out Height, new Color32(0,0,0,0), true, true, true, true, _CropKeepAspectRatio);
			}
            

			foreach (ColorLayer layer in ColorLayers)
				layer.pixels = new Color32[colors.Length];

			for (int i=0; i<colors.Length; ++i)
			{
				ColorLayers[0].pixels[i] = new Color32(colors[i].r, colors[i].r, colors[i].r, 255);
				ColorLayers[1].pixels[i] = new Color32(colors[i].g, colors[i].g, colors[i].g, 255);
				ColorLayers[2].pixels[i] = new Color32(colors[i].b, colors[i].b, colors[i].b, 255);
				ColorLayers[3].pixels[i] = new Color32(colors[i].a, colors[i].a, colors[i].a, 255);
			}
			foreach (ColorLayer layer in ColorLayers)
			{
				if (layer.textureSDF==null)
					layer.textureSDF = new Texture2D(Width, Height, TextureFormat.ARGB32, false, true);
				else
					layer.textureSDF.Resize(Width, Height);
				layer.textureSDF.SetPixels32(layer.pixels);
				layer.textureSDF.Apply ();
			}

			OutputTexture = new Texture2D (Width, Height, OutputFormat, false);
			OutputTexture.SetPixels32 (colors);
			OutputTexture.Apply ();
		}


		void SaveOutput()
		{
			EditorApplication.update -= SaveOutput;

			string Path = string.Empty;
			if (OutputTexture!=null)
				Path = AssetDatabase.GetAssetPath(OutputTexture);

			if (string.IsNullOrEmpty(Path))
			{
				Path = AssetDatabase.GetAssetPath(InputTexture);
				if (string.IsNullOrEmpty(Path))
					Path = "Assets/";
				else
					Path = System.IO.Path.GetDirectoryName( Path );
			}
			Path = EditorUtility.SaveFilePanelInProject("Save As", string.Concat(InputTexture.name, "_SDF.png"), "png", "Save Distance Field Texture as...", Path);

			if (!string.IsNullOrEmpty (Path))
			{
				TextureTools.SaveTexture (OutputTexture, Path);
				OutputTexture = AssetDatabase.LoadAssetAtPath (Path, typeof(Texture2D)) as Texture2D;
			}
		}
		#endregion
	}
}